services:
  postgres:
    image: postgres:14-alpine
    restart: always
    networks:
      - keyportal-internal
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
      - POSTGRES_DB=${POSTGRES_DB}

  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    restart: always
    networks:
      - keyportal-internal
    ports:
      - "5672:5672"
      - "15672:15672" # Remove if you don't want the web gui
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    configs:
      - source: rabbitmq-plugins
        target: /etc/rabbitmq/enabled_plugins
    volumes:
      - rabbitmq-lib:/var/lib/rabbitmq/
      - rabbitmq-log:/var/log/rabbitmq

  keyportal:
    image: keyportal-server
    pull_policy: build
    build:
      context: .
      dockerfile: src/main/docker/Dockerfile.native-full
    restart: always
    networks:
      - keyportal-internal
    ports:
      - "80:8080"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    environment:
      - QUARKUS_LOG_LEVEL=DEBUG
      - QUARKUS_LOG_CATEGORY__IO_LEVYSWORKS__LEVEL=DEBUG
      - QUARKUS_RABBITMQCLIENT_USERNAME=${RABBITMQ_USER}
      - QUARKUS_RABBITMQCLIENT_PASSWORD=${RABBITMQ_PASS}
      - QUARKUS_RABBITMQCLIENT_HOSTNAME=rabbitmq
      - QUARKUS_RABBITMQCLIENT_PORT=5672
      - QUARKUS_DATASOURCE_USERNAME=${POSTGRES_USER}
      - QUARKUS_DATASOURCE_PASSWORD=${POSTGRES_PASS}
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - SERVERS_WRAPPER_SERVERS_0__NAME=east-1
      - SERVERS_WRAPPER_SERVERS_1__NAME=west-1
      # - SERVERS_WRAPPER_SERVERS_(incrementing index of the agent)_NAME=desired-name
      # agent names must match with the remote keyportal-agent's identifier

configs:
  rabbitmq-plugins:
    content: "[rabbitmq_management]."

volumes:
  db-data:
  rabbitmq-lib:
    driver: local
  rabbitmq-log:
    driver: local

networks:
  keyportal-internal: